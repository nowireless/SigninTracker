// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Meeting meeting
// swagger:model Meeting
type Meeting struct {

	// committed
	Committed []*IDRef `json:"Committed"`

	// day
	// Format: date
	Day strfmt.Date `json:"Day,omitempty"`

	// End time of meeting. Using 24 hour time format. HH:MM:SS
	// Pattern: (?:[01]\d|2[0-3]):(?:[0-5]\d):(?:[0-5]\d)
	EndTime string `json:"EndTime,omitempty"`

	// signed in
	SignedIn []*IDRef `json:"SignedIn"`

	// signed out
	SignedOut []*IDRef `json:"SignedOut"`

	// Start time of meeting. Using 24 hour time format. HH:MM:SS
	// Pattern: (?:[01]\d|2[0-3]):(?:[0-5]\d):(?:[0-5]\d)
	StartTime string `json:"StartTime,omitempty"`

	// teams
	Teams []*IDRef `json:"Teams"`

	// id
	ID string `json:"id,omitempty"`
}

// Validate validates this meeting
func (m *Meeting) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommitted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignedIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignedOut(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Meeting) validateCommitted(formats strfmt.Registry) error {

	if swag.IsZero(m.Committed) { // not required
		return nil
	}

	for i := 0; i < len(m.Committed); i++ {
		if swag.IsZero(m.Committed[i]) { // not required
			continue
		}

		if m.Committed[i] != nil {
			if err := m.Committed[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Committed" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Meeting) validateDay(formats strfmt.Registry) error {

	if swag.IsZero(m.Day) { // not required
		return nil
	}

	if err := validate.FormatOf("Day", "body", "date", m.Day.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Meeting) validateEndTime(formats strfmt.Registry) error {

	if swag.IsZero(m.EndTime) { // not required
		return nil
	}

	if err := validate.Pattern("EndTime", "body", string(m.EndTime), `(?:[01]\d|2[0-3]):(?:[0-5]\d):(?:[0-5]\d)`); err != nil {
		return err
	}

	return nil
}

func (m *Meeting) validateSignedIn(formats strfmt.Registry) error {

	if swag.IsZero(m.SignedIn) { // not required
		return nil
	}

	for i := 0; i < len(m.SignedIn); i++ {
		if swag.IsZero(m.SignedIn[i]) { // not required
			continue
		}

		if m.SignedIn[i] != nil {
			if err := m.SignedIn[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SignedIn" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Meeting) validateSignedOut(formats strfmt.Registry) error {

	if swag.IsZero(m.SignedOut) { // not required
		return nil
	}

	for i := 0; i < len(m.SignedOut); i++ {
		if swag.IsZero(m.SignedOut[i]) { // not required
			continue
		}

		if m.SignedOut[i] != nil {
			if err := m.SignedOut[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SignedOut" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Meeting) validateStartTime(formats strfmt.Registry) error {

	if swag.IsZero(m.StartTime) { // not required
		return nil
	}

	if err := validate.Pattern("StartTime", "body", string(m.StartTime), `(?:[01]\d|2[0-3]):(?:[0-5]\d):(?:[0-5]\d)`); err != nil {
		return err
	}

	return nil
}

func (m *Meeting) validateTeams(formats strfmt.Registry) error {

	if swag.IsZero(m.Teams) { // not required
		return nil
	}

	for i := 0; i < len(m.Teams); i++ {
		if swag.IsZero(m.Teams[i]) { // not required
			continue
		}

		if m.Teams[i] != nil {
			if err := m.Teams[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Teams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Meeting) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Meeting) UnmarshalBinary(b []byte) error {
	var res Meeting
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
