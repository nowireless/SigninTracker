// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Team team
// swagger:model Team
type Team struct {

	// competition
	// Enum: [FRC FTC FLL FLLjr]
	Competition string `json:"Competition,omitempty"`

	// meetings
	Meetings []*IDRef `json:"Meetings"`

	// mentors
	Mentors []*IDRef `json:"Mentors"`

	// name
	Name string `json:"Name,omitempty"`

	// number
	Number int64 `json:"Number,omitempty"`

	// students
	Students []*IDRef `json:"Students"`
}

// Validate validates this team
func (m *Team) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompetition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMeetings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMentors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStudents(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var teamTypeCompetitionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["FRC","FTC","FLL","FLLjr"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		teamTypeCompetitionPropEnum = append(teamTypeCompetitionPropEnum, v)
	}
}

const (

	// TeamCompetitionFRC captures enum value "FRC"
	TeamCompetitionFRC string = "FRC"

	// TeamCompetitionFTC captures enum value "FTC"
	TeamCompetitionFTC string = "FTC"

	// TeamCompetitionFLL captures enum value "FLL"
	TeamCompetitionFLL string = "FLL"

	// TeamCompetitionFLLjr captures enum value "FLLjr"
	TeamCompetitionFLLjr string = "FLLjr"
)

// prop value enum
func (m *Team) validateCompetitionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, teamTypeCompetitionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Team) validateCompetition(formats strfmt.Registry) error {

	if swag.IsZero(m.Competition) { // not required
		return nil
	}

	// value enum
	if err := m.validateCompetitionEnum("Competition", "body", m.Competition); err != nil {
		return err
	}

	return nil
}

func (m *Team) validateMeetings(formats strfmt.Registry) error {

	if swag.IsZero(m.Meetings) { // not required
		return nil
	}

	for i := 0; i < len(m.Meetings); i++ {
		if swag.IsZero(m.Meetings[i]) { // not required
			continue
		}

		if m.Meetings[i] != nil {
			if err := m.Meetings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Meetings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Team) validateMentors(formats strfmt.Registry) error {

	if swag.IsZero(m.Mentors) { // not required
		return nil
	}

	for i := 0; i < len(m.Mentors); i++ {
		if swag.IsZero(m.Mentors[i]) { // not required
			continue
		}

		if m.Mentors[i] != nil {
			if err := m.Mentors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Mentors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Team) validateStudents(formats strfmt.Registry) error {

	if swag.IsZero(m.Students) { // not required
		return nil
	}

	for i := 0; i < len(m.Students); i++ {
		if swag.IsZero(m.Students[i]) { // not required
			continue
		}

		if m.Students[i] != nil {
			if err := m.Students[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Students" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Team) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Team) UnmarshalBinary(b []byte) error {
	var res Team
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
