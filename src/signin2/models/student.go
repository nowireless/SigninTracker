// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Student student
// swagger:model Student
type Student struct {

	// at meta id
	// Required: true
	AtMetaID ID `json:"@meta.id"`

	// graduation year
	GraduationYear int64 `json:"graduationYear,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *StudentName `json:"name"`

	// school Id
	SchoolID string `json:"schoolId,omitempty"`
}

// Validate validates this student
func (m *Student) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAtMetaID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Student) validateAtMetaID(formats strfmt.Registry) error {

	if err := m.AtMetaID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("@meta.id")
		}
		return err
	}

	return nil
}

func (m *Student) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Student) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if m.Name != nil {
		if err := m.Name.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("name")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Student) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Student) UnmarshalBinary(b []byte) error {
	var res Student
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StudentName student name
// swagger:model StudentName
type StudentName struct {

	// first
	// Required: true
	First *string `json:"first"`

	// last
	// Required: true
	Last *string `json:"last"`
}

// Validate validates this student name
func (m *StudentName) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFirst(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLast(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StudentName) validateFirst(formats strfmt.Registry) error {

	if err := validate.Required("name"+"."+"first", "body", m.First); err != nil {
		return err
	}

	return nil
}

func (m *StudentName) validateLast(formats strfmt.Registry) error {

	if err := validate.Required("name"+"."+"last", "body", m.Last); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StudentName) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StudentName) UnmarshalBinary(b []byte) error {
	var res StudentName
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
