// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Person person
// swagger:model Person
type Person struct {

	// database ID
	DatabaseID *int64 `json:"@database.id,omitempty"`

	// checkinid
	Checkinid *string `json:"checkinid,omitempty"`

	// email
	// Format: email
	Email *strfmt.Email `json:"email,omitempty"`

	// mentor of
	MentorOf []*IDRef `json:"mentorOf"`

	// name
	Name *PersonName `json:"name,omitempty"`

	// parent of
	ParentOf []*PersonParentOfItems0 `json:"parentOf"`

	// parents
	Parents []*IDRef `json:"parents"`

	// phone
	Phone *string `json:"phone,omitempty"`

	// student
	Student *PersonStudent `json:"student,omitempty"`
}

// Validate validates this person
func (m *Person) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMentorOf(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentOf(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStudent(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Person) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(m.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("email", "body", "email", m.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Person) validateMentorOf(formats strfmt.Registry) error {

	if swag.IsZero(m.MentorOf) { // not required
		return nil
	}

	for i := 0; i < len(m.MentorOf); i++ {
		if swag.IsZero(m.MentorOf[i]) { // not required
			continue
		}

		if m.MentorOf[i] != nil {
			if err := m.MentorOf[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mentorOf" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Person) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if m.Name != nil {
		if err := m.Name.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("name")
			}
			return err
		}
	}

	return nil
}

func (m *Person) validateParentOf(formats strfmt.Registry) error {

	if swag.IsZero(m.ParentOf) { // not required
		return nil
	}

	for i := 0; i < len(m.ParentOf); i++ {
		if swag.IsZero(m.ParentOf[i]) { // not required
			continue
		}

		if m.ParentOf[i] != nil {
			if err := m.ParentOf[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parentOf" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Person) validateParents(formats strfmt.Registry) error {

	if swag.IsZero(m.Parents) { // not required
		return nil
	}

	for i := 0; i < len(m.Parents); i++ {
		if swag.IsZero(m.Parents[i]) { // not required
			continue
		}

		if m.Parents[i] != nil {
			if err := m.Parents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Person) validateStudent(formats strfmt.Registry) error {

	if swag.IsZero(m.Student) { // not required
		return nil
	}

	if m.Student != nil {
		if err := m.Student.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("student")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Person) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Person) UnmarshalBinary(b []byte) error {
	var res Person
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PersonName person name
// swagger:model PersonName
type PersonName struct {

	// first
	First *string `json:"first,omitempty"`

	// last
	Last *string `json:"last,omitempty"`
}

// Validate validates this person name
func (m *PersonName) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PersonName) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PersonName) UnmarshalBinary(b []byte) error {
	var res PersonName
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PersonParentOfItems0 person parent of items0
// swagger:model PersonParentOfItems0
type PersonParentOfItems0 struct {

	// relation
	// Enum: [Father Mother Guardian]
	Relation string `json:"relation,omitempty"`

	// student
	Student *IDRef `json:"student,omitempty"`
}

// Validate validates this person parent of items0
func (m *PersonParentOfItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRelation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStudent(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var personParentOfItems0TypeRelationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Father","Mother","Guardian"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		personParentOfItems0TypeRelationPropEnum = append(personParentOfItems0TypeRelationPropEnum, v)
	}
}

const (

	// PersonParentOfItems0RelationFather captures enum value "Father"
	PersonParentOfItems0RelationFather string = "Father"

	// PersonParentOfItems0RelationMother captures enum value "Mother"
	PersonParentOfItems0RelationMother string = "Mother"

	// PersonParentOfItems0RelationGuardian captures enum value "Guardian"
	PersonParentOfItems0RelationGuardian string = "Guardian"
)

// prop value enum
func (m *PersonParentOfItems0) validateRelationEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, personParentOfItems0TypeRelationPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PersonParentOfItems0) validateRelation(formats strfmt.Registry) error {

	if swag.IsZero(m.Relation) { // not required
		return nil
	}

	// value enum
	if err := m.validateRelationEnum("relation", "body", m.Relation); err != nil {
		return err
	}

	return nil
}

func (m *PersonParentOfItems0) validateStudent(formats strfmt.Registry) error {

	if swag.IsZero(m.Student) { // not required
		return nil
	}

	if m.Student != nil {
		if err := m.Student.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("student")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PersonParentOfItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PersonParentOfItems0) UnmarshalBinary(b []byte) error {
	var res PersonParentOfItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PersonStudent person student
// swagger:model PersonStudent
type PersonStudent struct {

	// graduation year
	GraduationYear *int64 `json:"graduationYear,omitempty"`

	// school email
	// Format: email
	SchoolEmail *strfmt.Email `json:"schoolEmail,omitempty"`

	// school Id
	SchoolID *string `json:"schoolId,omitempty"`

	// teams
	Teams []*IDRef `json:"teams"`
}

// Validate validates this person student
func (m *PersonStudent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSchoolEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PersonStudent) validateSchoolEmail(formats strfmt.Registry) error {

	if swag.IsZero(m.SchoolEmail) { // not required
		return nil
	}

	if err := validate.FormatOf("student"+"."+"schoolEmail", "body", "email", m.SchoolEmail.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PersonStudent) validateTeams(formats strfmt.Registry) error {

	if swag.IsZero(m.Teams) { // not required
		return nil
	}

	for i := 0; i < len(m.Teams); i++ {
		if swag.IsZero(m.Teams[i]) { // not required
			continue
		}

		if m.Teams[i] != nil {
			if err := m.Teams[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("student" + "." + "teams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PersonStudent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PersonStudent) UnmarshalBinary(b []byte) error {
	var res PersonStudent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
